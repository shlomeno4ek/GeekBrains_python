# Задача №39. Решение в группах Даны два массива чисел. Требуется вывести те элементы первого массива 
# (в том порядке, в каком они идут в первом массиве), которых нет во втором массиве. Пользователь вводит  
# число N - количество элементов в первом массиве, затем N чисел - элементы массива. Затем число M - 
# количество элементов во втором массиве. Затем элементы второго массива 

# sp1 = [3, 1, 3, 4, 2, 4, 12]
# sp2 = [4, 15, 43, 1, 15, 1]

# print([i for i in sp1 if i not in sp2])
# print([i for i in sp1 if i not in set(sp2)])

# Задача №41. Решение в группах Дан массив, состоящий из целых чисел. Напишите программу, 
# которая в данном массиве определит количество элементов, у которых два соседних и, при этом, 
# оба соседних элемента меньше данного. Сначала вводится число N — количество элементов в массиве  
# Далее записаны N чисел — элементы массива. Массив состоит из целых чисел. 

# def find_champ(sp, index):
#     if sp[index] > sp[index+1] and sp[index] > sp[index-1]:
#         return True
#     return False

# def find_champ2(sp, index):
#     if sp[index] > sp[(index+1) % len(sp)] and sp[index] > sp[index-1]:
#         return True
#     return False




# sp1 = [1,2,3,4,5]  # 0

# print(sum([1 for i in range(len(sp1)-1) if find_champ(sp1,i) ]))

# sp1 = [1,5,1,5,1] # 2

# print(sum([1 for i in range(len(sp1)-1) if find_champ(sp1,i)  ]))

# #закольцовываем список 

# sp1 = [1,2,3,4,5]  # 1

# print(sum([1 for i in range(len(sp1)) if find_champ2(sp1,i) ]))

# Задача №43. Решение в группах Дан список чисел. Посчитайте, сколько в нем пар элементов, 
# равных друг другу. Считается, что любые два элемента, равные друг другу образуют одну пару, 
# которую необходимо посчитать. Вводится список чисел. Все числа списка находятся на разных строках. 

# sp = [1,2,3,2,3,3,3,3] #2

# # print(sp.count(3))
# # print(sum([1 for i in sp if sp.count(i) % 2 == 0]) / 2)
# print(sum( [sp.count(i) // 2 for i in set(sp) ]  ))


# Задача №45. Решение в группах Два различных натуральных числа n и m называются дружественными, 
# если сумма делителей числа n (включая 1, но исключая само n) равна числу m и наоборот. 
# Например, 220 и 284 – дружественные числа. По данному числу k выведите все пары дружественных чисел, 
# каждое из которых не превосходит k. Программа получает на вход одно натуральное число k, не превосходящее 10000. 
# Программа должна вывести  все пары дружественных чисел, каждое из которых не превосходит k. Пары необходимо выводить 
# по одной в строке, разделяя пробелами. Каждая пара должна быть выведена только один раз (перестановка чисел новую 
# пару не дает). Ввод: 300 Вывод:  220 284

def summa_dels(num):
    res = 0
    for i in range(1,num):
        if num % i == 0:
            res += i
    return res


# print(test := 5)

# print(test + 10)

k = int(input("До какого числа будем анализировать "))

# res = []

# for m in range(1, k+1):
#     n = summa_dels(m)
#     if summa_dels (n) == m and n > m:
#         res.append( (n,m) )

# print(res)

print(res2 := [ (m,n)  for m in range(1, k+1) if summa_dels (n := summa_dels(m)) == m and n > m  ])


# print( [ (m,summa_dels(m))  for m in range(1, k+1) if summa_dels (summa_dels(m)) == m and summa_dels(m) > m  ])
print(res2)